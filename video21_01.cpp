/*
	今天将要学习的内容是关于static,首先我不知道为什么要有这个keyword？我的第一个疑惑就是为什么
我们会需要这个keyword，我想肯定是为了解决一些我们必将会遇到的问题，所以才会出现这样的keyword。
	我有一个疑惑就是static只会存在于一个class中吗？还是说会存在于其他的地方？那么我该如何验证我
的疑惑呢？我想到了一个办法就是写一个class和不写一个class进行验证.
	通过验证，没有得到我想要的一个结果还是需要继续搜集资料。
	大概知道了static是怎么一回事了：首先我们可能有一种需求，就是想要某个函数中的变量在这个函数
被call之后也不会被删除，那么就会需要到我们的static keyword的了，那么有没有一种可能，我自己可以
实现类似这样的功能？
	想要尝试着实现一下这样的功能。我的想法就是利用pointer的功能在和heap上实现这样的功能，在用
完之后再从heap上删除，我想static实现的原理可能也是类似的。
*/


/*
1)explain
	上面的解释是在我学习之前自己所想到的一些问题，那么现在则是学习cherno的部分；
2）static 
	有两种意思，取决于我们所写的代码；其中的一种是写在class或者是struct中，另外一种则是写在这
两种之外的。
	那么今天cherno将会讲解的是关于写在class和struct之外的那种情况，也就是所说的第二种情况。在
第二种情况中，static意味着这个被定义的variable只是在这个文件中是可以被利用的，也就是所谓的可见
但是在另外的file则是不可见的。

3)point
	今天学到的最重要的一个东西就是实现功能之间的互相不影响，这一功能的实现就是靠static关键词的
当然，这个关键词的使用是在class和struct之外的，这是一个非常有用的东西。
	试想一下当你写一个较大的程序的时候，那么你会做的一件事情就是将整个功能分成若干部分进行实现，
也就是多个cpp文件，但是C++本质是从C语言而来的，因此最终这多个文件将成为一个文件，那么在这种情况
下，我们所写的变量或者是函数将会不止一个或者少数，将会出现很多的变量和函数，但是这些函数的功能和
命名将成为一个大的问题，那么我们想要做什么？
	我们想要实现的就是一个文件只是提供功能而不是细节，这也就是所谓的不可见的含义，那么在这种情况
下，我们对代码的维护将会变得容易，并且更加地好管理。
	而且最重要的是可以避免文件与文件之间的函数或者是变量的冲突。那么在以后写代码的时候一定要注意
这种方式，也就是要实现这样的功能（对变量和函数进行static），除非我们想要这些变量或者是函数变成
global。

*/

#include "video21.h"
int Multiple(int a, int b)
{
	return a * b;
}


int main()
{
	Print_attribution(2, 2);
}